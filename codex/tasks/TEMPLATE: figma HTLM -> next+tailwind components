üß† Codex Task Template: Figma HTML ‚Üí Next.js + Tailwind Components

üìÑ Task Title
Example: Refactor Figma Exported Header and Hero to React/Tailwind Components

üéØ Goal
Convert the pasted Figma-exported HTML/CSS into idiomatic, production-quality React components using Next.js and Tailwind CSS.
Split code into logical components (e.g. NavHeader, HeroSection, FeatureGrid) if more than one UI section is pasted.
Remove hardcoded px/absolute styles; use Tailwind's utility classes and responsive breakpoints.
Ensure code is responsive and matches the original layout.
Use next/link for navigation where applicable.
Import any custom fonts at the global stylesheet level, not per component.
Place any assets (logos, icons) in /public and reference accordingly.
If text is obviously a label or heading, make it semantic (<h1>, <nav>, etc).
If you see an opportunity to refactor repeated elements as reusable components, do so.
Output only the relevant code files (one file per component), plus any brief import/setup notes if needed.
üß† Prompt to Codex
Below is HTML/CSS exported from Figma for one or more sections of my landing page.

**Instructions:**
1. Convert each logical section into a reusable React component using Tailwind CSS.
2. Ensure layout is responsive; do not use hardcoded px/absolute unless absolutely necessary.
3. Use Next.js conventions (e.g., `next/link`, functional components, etc).
4. If more than one section is included, output each as a separate component.
5. For custom fonts, assume global import and use Tailwind's font utilities or extend the Tailwind config if needed.
6. Where static assets are referenced, use the `/public` folder.
7. Add any helpful setup/import notes at the top, but do not output explanations‚Äîjust code.

**Figma-exported code starts here:**

[paste your Figma HTML/CSS blocks here]

Tips for Efficient Iteration
Group by UI section: Header + Hero in one batch, then FeatureGrid, etc. If the code is very large, keep it to one logical section at a time.
If you have lots of sections, do 2-3 per Codex task, not 10‚Äîotherwise Codex output can become error-prone or incomplete.
After Codex generates the files, review and test locally‚Äîadjust, then move to the next batch.
When you encounter repeated UI patterns (e.g. cards, icons), ask Codex to create a reusable Card or Icon component.
You can copy-paste the above into each Codex task.
Just replace the ‚ÄúFigma-exported code starts here:‚Äù section with the relevant code block(s).
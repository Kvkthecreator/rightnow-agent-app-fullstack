name: Notification System Guards

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  notification-guards:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for deprecated notification patterns
        run: |
          echo "üîç Checking for deprecated notification patterns..."
          
          # Check for direct alert() calls (should use notificationAPI)
          if grep -r "alert(" --include="*.ts" --include="*.tsx" web/components web/app web/lib; then
            echo "‚ùå Found alert() calls - please use notificationAPI.emitActionResult() instead"
            exit 1
          fi
          
          # Check for direct console.log notifications (should use proper logging)
          if grep -r "console\.log.*notification\|console\.log.*success\|console\.log.*error.*message" --include="*.ts" --include="*.tsx" web/components web/app web/lib; then
            echo "‚ùå Found console notification patterns - please use notificationAPI methods"
            exit 1
          fi
          
          # Check for legacy NotificationCenter usage (should use new system)
          if grep -r "NotificationCenter" --include="*.ts" --include="*.tsx" web/components web/app web/lib | grep -v "import.*NotificationCenter"; then
            echo "‚ùå Found legacy NotificationCenter usage - please use NotificationProvider + ToastHost"
            exit 1
          fi
          
          echo "‚úÖ No deprecated notification patterns found"
          
      - name: Verify notification system integrity
        run: |
          echo "üîç Verifying notification system files..."
          
          # Check required files exist
          required_files=(
            "web/docs/YARNNN_ALERTS_NOTIFICATIONS_CANON.md"
            "web/lib/notifications.ts"
            "web/lib/api/notifications.ts"
            "web/components/notifications/ToastHost.tsx"
            "web/components/providers/NotificationProvider.tsx"
            "supabase/migrations/20250124_create_app_events.sql"
            "api/src/middleware/correlation.py"
            "api/src/services/events.py"
            "api/src/schemas/base.py"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required notification system files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "‚úÖ All notification system files present"
          
      - name: Check Canon compliance
        run: |
          echo "üîç Checking YARNNN Alerts & Notifications Canon compliance..."
          
          # Verify Canon header exists
          if ! grep -q "Governed by.*YARNNN_ALERTS_NOTIFICATIONS_CANON" web/lib/notifications.ts; then
            echo "‚ùå lib/notifications.ts missing Canon governance header"
            exit 1
          fi
          
          if ! grep -q "Governed by.*YARNNN_ALERTS_NOTIFICATIONS_CANON" web/lib/api/notifications.ts; then
            echo "‚ùå lib/api/notifications.ts missing Canon governance header"
            exit 1
          fi
          
          if ! grep -q "Governed by.*YARNNN_ALERTS_NOTIFICATIONS_CANON" api/src/services/events.py; then
            echo "‚ùå api/src/services/events.py missing Canon governance header"
            exit 1
          fi
          
          echo "‚úÖ Canon compliance verified"